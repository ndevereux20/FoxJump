00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/4/2021 4:14:55 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  ALL_REG         REG     D0-D7/A0-A6
00000000  =00000000                  8  D0_OFFSET       EQU     0
00000000  =00000004                  9  D1_OFFSET       EQU     4
00000000  =00000008                 10  D2_OFFSET       EQU     8
00000000  =0000000C                 11  D3_OFFSET       EQU     12
00000000  =00000010                 12  D4_OFFSET       EQU     16
00000000  =00000014                 13  D5_OFFSET       EQU     20
00000000  =00000018                 14  D6_OFFSET       EQU     24
00000000  =0000001C                 15  D7_OFFSET       EQU     28
00000000  =00000020                 16  A0_OFFSET       EQU     32
00000000  =00000024                 17  A1_OFFSET       EQU     36
00000000  =00000028                 18  A2_OFFSET       EQU     40
00000000  =0000002C                 19  A3_OFFSET       EQU     44
00000000  =00000030                 20  A4_OFFSET       EQU     48  
00000000  =00000034                 21  A5_OFFSET       EQU     52
00000000  =00000038                 22  A6_OFFSET       EQU     56
00000000                            23  
00000000  =00000004                 24  CUR_DISPLAY_X      EQU     4
00000000  =00000008                 25  CUR_DISPLAY_Y      EQU     8
00000000  =0000000C                 26  LOOP_COUNTER       EQU     12
00000000  =00000004                 27  ERROR_COUNTER_OFFSET      EQU     4
00000000                            28  
00000000  =00000002                 29  OFFSET_TO_FILE_SIZE     EQU     2
00000000  =00000012                 30  OFFSET_TO_IMAGE_WIDTH   EQU     18
00000000  =00000016                 31  OFFSET_TO_IMAGE_HEIGHT  EQU     22 
00000000  =0000000A                 32  OFFSET_TO_IMAGE_OFFSET  EQU     10
00000000  =0000001C                 33  OFFSET_TO_IMAGE_BIT_DEPTH   EQU     28
00000000                            34  
00000000  =00000020                 35  BIT_DEPTH               EQU     $20 
00000000  =0000424D                 36  BMP_FILE_TYPE            EQU     $424D
00000000                            37  
00000000  =00000051                 38  FILL_COLOR_TRAP__CODE  equ     81
00000000  =00000050                 39  PEN_COLOR_TRAP_CODE     EQU     80
00000000  =00000052                 40  DRAW_PIXEL_TRAP_CODE    EQU     82
00000000  =00000021                 41  SET_OUTPUT_RESOLUTION_TRAP_CODE EQU     33
00000000  =0000005E                 42  REPAINT_SCREEN_TRAP_CODE    EQU     94
00000000  =0000000B                 43  CLEAR_SCREEN_COMMAND    EQU     11
00000000  =0000005C                 44  DRAWING_MODE_TRAP_CODE  EQU 92
00000000  =00000011                 45  DOUBLE_BUFFERED_MODE    EQU 17
00000000                            46  
00000000  =0000FF00                 47  CLEAR_SCREEN_MAGIC_VAL  EQU     $FF00
00000000  =00000017                 48  DELAY_FRAME             EQU     23
00000000  =00000001                 49  FRAME_DELAY_TIME        EQU     1
00000000                            50  
00000000  =0000000D                 51  CR      EQU     $0D
00000000  =0000000A                 52  LF      EQU     $0A
00000000                            53  
00000000  =00000280                 54  DISPLAY_WINDOW_WIDTH    EQU     640   
00000000  =000001E0                 55  DISPLAY_WINDOW_HEIGHT   EQU     480
00000000                            56  
00000000  =00808000                 57  SpriteBackgroundColor       EQU     $808000
00000000  =00000006                 58  RUNNING_SPRITE_COUNT        EQU     $6
00000000                            59  
00000000  =00000057                 60  DRAW_RECTANGLE_COMMAND      EQU     87 
00000000                            61  
00000000  =00000040                 62  OBJECT_3_WIDTH    EQU     64   
00000000  =00000044                 63  OBJECT_3_HEIGHT   EQU     68
00000000  =00000048                 64  OBJECT_3_POSITION     EQU     72
00000000                            65  
00000000  =0000004C                 66  OBJECT_2_WIDTH    EQU     76
00000000  =00000050                 67  OBJECT_2_HEIGHT   EQU     80
00000000  =00000054                 68  OBJECT_2_POSITION     EQU     84
00000000                            69      
00000000  =00000058                 70  OBJECT_1_WIDTH    EQU     88  
00000000  =0000005C                 71  OBJECT_1_HEIGHT   EQU     92
00000000  =00000060                 72  OBJECT_1_POSITION     EQU     96
00000000                            73  
00000000  =0000000A                 74  OBJECT_VELOCITY     EQU     10
00000000  =00000028                 75  FRAMES_SKIP_TO_DRAW     EQU     40
00000000                            76  
00000000  =00FFFFFF                 77  WHITE           equ $00FFFFFF
00000000                            78  
00001000                            79      ORG    $1000
00001000                            80  START:                  ; first instruction of program
00001000                            81      
00001000  103C 005C                 82      move.b  #DRAWING_MODE_TRAP_CODE,d0          ; Why is this useful?
00001004  123C 0011                 83      move.b  #DOUBLE_BUFFERED_MODE,d1
00001008  4E4F                      84      trap    #15    
0000100A  4280                      85      clr.l   d0
0000100C  4281                      86      clr.l   d1
0000100E                            87      
0000100E  103C 0021                 88      move.b  #SET_OUTPUT_RESOLUTION_TRAP_CODE, d0    0** set window size 
00001012  223C 00000280             89      move.l  #DISPLAY_WINDOW_WIDTH,d1 
00001018  4841                      90      swap.w  d1 
0000101A  323C 01E0                 91      move.w  #DISPLAY_WINDOW_HEIGHT,d1
0000101E  4E4F                      92      trap    #15 
00001020                            93      
00001020  7E28                      94      move.l  #FRAMES_SKIP_TO_DRAW, d7 
00001022                            95      
00001022  7024                      96      move.l  #36, d0         ; make room for the objects position on the stack 
00001024  9FC0                      97      sub.l   d0, sp
00001026                            98  gameLoop:
00001026  4EB9 00001068             99      jsr     clearScreen
0000102C                           100      
0000102C  4EB9 0000107E            101      jsr     updateObject
00001032  4EB9 0000118E            102      jsr     drawObject
00001038                           103  
00001038  4EB9 00001058            104      jsr     swapBuffers
0000103E  4EB9 00001048            105      jsr     delayFrame
00001044                           106      
00001044  5287                     107      addi.l  #1, d7
00001046                           108      
00001046  60DE                     109      bra     gameLoop   
00001048                           110    
00001048                           111  delayFrame
00001048  48E7 FFFE                112      movem.l ALL_REG, -(sp)                      ** load the paramaters onto the stack 
0000104C                           113  
0000104C  7017                     114      move.l  #DELAY_FRAME, d0
0000104E  7201                     115      move.l  #FRAME_DELAY_TIME, d1
00001050  4E4F                     116      TRAP    #15
00001052                           117      
00001052  4CDF 7FFF                118      movem.l (sp)+, ALL_REG
00001056  4E75                     119      rts
00001058                           120  
00001058                           121  swapBuffers
00001058  48E7 FFFE                122      movem.l ALL_REG, -(sp)                      ** load the paramaters onto the stack 
0000105C                           123  
0000105C  103C 005E                124      move.b  #REPAINT_SCREEN_TRAP_CODE,d0
00001060  4E4F                     125      TRAP    #15
00001062                           126      
00001062  4CDF 7FFF                127      movem.l (sp)+, ALL_REG
00001066  4E75                     128      rts  
00001068                           129        
00001068                           130  clearScreen
00001068  48E7 FFFE                131      movem.l ALL_REG, -(sp)                      ** load the paramaters onto the stack 
0000106C                           132  
0000106C  103C 000B                133      move.b  #CLEAR_SCREEN_COMMAND,d0
00001070  223C 0000FF00            134      move.l  #CLEAR_SCREEN_MAGIC_VAL,d1
00001076  4E4F                     135      TRAP    #15
00001078                           136      
00001078  4CDF 7FFF                137      movem.l (sp)+, ALL_REG
0000107C  4E75                     138      rts    
0000107E                           139  updateObject: 
0000107E  48E7 FFFE                140      movem.l ALL_REG, -(sp)                      ** load the paramaters onto the stack 
00001082                           141     
00001082  202F 001C                142      move.l  D7_OFFSET(sp), d0 
00001086  0C80 00000028            143      cmpi.l  #FRAMES_SKIP_TO_DRAW, d0 
0000108C  6700 0006                144      beq     createNewObject 
00001090  6600 00A2                145      bne     updateObject1 
00001094                           146  createNewObject:
00001094  2F7C 00000000 001C       147      move.l  #0, D7_OFFSET(sp)               ** resets the frames since object has been created counter 
0000109C                           148      *gets random object height 
0000109C  103C 0008                149      move.b  #8, d0 
000010A0  4E4F                     150      trap    #15 
000010A2  2401                     151      move.l  d1, d2 
000010A4  C4BC 005FFFFF            152      and.l   #$5FFFFF,d2 
000010AA  84FC 0064                153      divu    #100,d2
000010AE  4242                     154      clr.w   d2
000010B0  4842                     155      swap    d2
000010B2  0642 0032                156      add.w   #50,d2
000010B6                           157      *gets random object width 
000010B6  103C 0008                158      move.b  #8, d0 
000010BA  4E4F                     159      trap    #15  
000010BC  C2BC 005FFFFF            160      and.l   #$5FFFFF,d1 
000010C2  82FC 0064                161      divu    #100,d1
000010C6  4241                     162      clr.w   d1
000010C8  4841                     163      swap    d1
000010CA  0641 0032                164      add.w   #50,d1
000010CE                           165      
000010CE  282F 0058                166      move.l  OBJECT_1_WIDTH(sp), d4 
000010D2  0C84 FFFFFFFF            167      cmpi.l  #$FFFFFFFF, d4 
000010D8  6700 0022                168      beq     putInObject1
000010DC  282F 004C                169      move.l  OBJECT_2_WIDTH(sp), d4 
000010E0  0C84 FFFFFFFF            170      cmpi.l  #$FFFFFFFF, d4
000010E6  6700 0028                171      beq     putInObject2
000010EA  282F 0040                172      move.l  OBJECT_3_WIDTH(sp), d4 
000010EE  0C84 FFFFFFFF            173      cmpi.l  #$FFFFFFFF, d4
000010F4  6700 002E                174      beq     putInObject3
000010F8  6600 003A                175      bne     updateObject1
000010FC                           176  ** moves the newly created object to an open position on the stack:
000010FC                           177  ** either 1, 2, or 3 (as no more than 3 objects should be on the scene at once 
000010FC                           178  putInObject1:
000010FC  2F41 0058                179      move.l  d1, OBJECT_1_WIDTH(sp)
00001100  2F42 005C                180      move.l  d2, OBJECT_1_HEIGHT(sp)
00001104  2F7C 00000280 0060       181      move.l  #DISPLAY_WINDOW_WIDTH, OBJECT_1_POSITION(sp)
0000110C  6000 0026                182      bra     updateObject1
00001110                           183  putInObject2:
00001110  2F41 004C                184      move.l  d1, OBJECT_2_WIDTH(sp)
00001114  2F42 0050                185      move.l  d2, OBJECT_2_HEIGHT(sp)
00001118  2F7C 00000280 0054       186      move.l  #DISPLAY_WINDOW_WIDTH, OBJECT_2_POSITION(sp)
00001120  6000 0012                187      bra     updateObject1
00001124                           188  putInObject3: 
00001124  2F41 0040                189      move.l  d1, OBJECT_3_WIDTH(sp)
00001128  2F42 0044                190      move.l  d2, OBJECT_3_HEIGHT(sp)
0000112C  2F7C 00000280 0048       191      move.l  #DISPLAY_WINDOW_WIDTH, OBJECT_3_POSITION(sp)
00001134                           192  
00001134                           193  ** checks to see if there is a game object in either 1, 2, or 3 position on the stack 
00001134                           194  ** if there is increment it by the velocity     
00001134                           195  updateObject1:
00001134  222F 0058                196      move.l  OBJECT_1_WIDTH(sp), d1 
00001138  0C81 FFFFFFFF            197      cmpi.l  #$FFFFFFFF, d1 
0000113E  6700 0010                198      beq     updateObject2
00001142                           199      
00001142  2C2F 0060                200      move.l  OBJECT_1_POSITION(sp), d6 
00001146  0486 0000000A            201      subi.l   #OBJECT_VELOCITY, d6 
0000114C  2F46 0060                202      move.l  d6, OBJECT_1_POSITION(sp)
00001150                           203      
00001150                           204  updateObject2:
00001150  222F 004C                205      move.l  OBJECT_2_WIDTH(sp), d1 
00001154  0C81 FFFFFFFF            206      cmpi.l  #$FFFFFFFF, d1 
0000115A  6700 0010                207      beq     updateObject3
0000115E                           208      
0000115E  2C2F 0054                209      move.l  OBJECT_2_POSITION(sp), d6 
00001162  0486 0000000A            210      subi.l   #OBJECT_VELOCITY, d6 
00001168  2F46 0054                211      move.l  d6, OBJECT_2_POSITION(sp)
0000116C                           212  updateObject3: 
0000116C  222F 0040                213      move.l  OBJECT_3_WIDTH(sp), d1 
00001170  0C81 FFFFFFFF            214      cmpi.l  #$FFFFFFFF, d1 
00001176  6700 0010                215      beq     returnUpdateObject
0000117A                           216      
0000117A  2C2F 0048                217      move.l  OBJECT_3_POSITION(sp), d6 
0000117E  0486 0000000A            218      subi.l   #OBJECT_VELOCITY, d6 
00001184  2F46 0048                219      move.l  d6, OBJECT_3_POSITION(sp)
00001188                           220  returnUpdateObject:
00001188  4CDF 7FFF                221      movem.l (sp)+, ALL_REG
0000118C  4E75                     222      rts                                        ** return, and reset the stack 
0000118E                           223      
0000118E                           224      
0000118E                           225  ** draw up to 3 objects ( there should be no more than 3 objects on the screen at a time for the player to have to jump over 
0000118E                           226  ** do this by drawing a rectangle of random width and height
0000118E                           227  drawObject
0000118E  48E7 FFFE                228      movem.l ALL_REG, -(sp)                      ** load the paramaters onto the stack 
00001192                           229  object1:   
00001192  222F 0058                230      move.l  OBJECT_1_WIDTH(sp), d1 
00001196  0C81 FFFFFFFF            231      cmpi.l  #$FFFFFFFF, d1 
0000119C  6700 0038                232      beq     object2
000011A0                           233     
000011A0  223C 00FFFFFF            234      move.l  #WHITE, d1 
000011A6  103C 0050                235      move.b  #PEN_COLOR_TRAP_CODE,d0
000011AA  4E4F                     236      trap    #15 
000011AC  103C 0051                237      move.b  #FILL_COLOR_TRAP__CODE, d0 
000011B0  4E4F                     238      trap    #15 
000011B2                           239      
000011B2  103C 0057                240      move.b  #DRAW_RECTANGLE_COMMAND , d0
000011B6  2A2F 0060                241      move.l  OBJECT_1_POSITION(sp), d5
000011BA  2605                     242      move.l  d5, d3  
000011BC  E085                     243      asr.l   #8, d5
000011BE  9685                     244      sub.l   d5, d3 
000011C0  2203                     245      move.l  d3, d1 
000011C2  92AF 0058                246      sub.l   OBJECT_1_WIDTH(sp), d1 
000011C6                           247      
000011C6  2A3C 000001E0            248      move.l  #DISPLAY_WINDOW_HEIGHT, d5 
000011CC  2805                     249      move.l  d5, d4 
000011CE  9AAF 005C                250      sub.l   OBJECT_1_HEIGHT(sp), d5 
000011D2  2405                     251      move.l  d5,d2 
000011D4  4E4F                     252      trap    #15 
000011D6                           253  
000011D6                           254  object2:
000011D6  222F 004C                255      move.l  OBJECT_2_WIDTH(sp), d1 
000011DA  0C81 FFFFFFFF            256      cmpi.l  #$FFFFFFFF, d1 
000011E0  6700 0038                257      beq     object3
000011E4                           258      
000011E4  223C 00FFFFFF            259      move.l  #WHITE, d1 
000011EA  103C 0050                260      move.b  #PEN_COLOR_TRAP_CODE,d0
000011EE  4E4F                     261      trap    #15 
000011F0  103C 0051                262      move.b  #FILL_COLOR_TRAP__CODE, d0 
000011F4  4E4F                     263      trap    #15 
000011F6                           264      
000011F6  103C 0057                265      move.b  #DRAW_RECTANGLE_COMMAND , d0
000011FA  2A2F 0054                266      move.l  OBJECT_2_POSITION(sp), d5
000011FE  2605                     267      move.l  d5, d3  
00001200  E085                     268      asr.l   #8, d5
00001202  9685                     269      sub.l   d5, d3 
00001204  2203                     270      move.l  d3, d1 
00001206  92AF 004C                271      sub.l   OBJECT_2_WIDTH(sp), d1 
0000120A                           272      ;move.l  OBJECT_2_POSITION(sp), d5 
0000120A                           273      ;asr.l   #8, d5
0000120A                           274      ;move.l  d5, d3 
0000120A                           275      ;sub.l   OBJECT_2_WIDTH(sp), d5 
0000120A                           276      ;move.l  d5, d1 
0000120A                           277      
0000120A  2A3C 000001E0            278      move.l  #DISPLAY_WINDOW_HEIGHT, d5 
00001210  2805                     279      move.l  d5, d4 
00001212  9AAF 0050                280      sub.l   OBJECT_2_HEIGHT(sp), d5 
00001216  2405                     281      move.l  d5,d2 
00001218  4E4F                     282      trap    #15
0000121A                           283  object3:
0000121A  222F 0040                284      move.l  OBJECT_3_WIDTH(sp), d1 
0000121E  0C81 FFFFFFFF            285      cmpi.l  #$FFFFFFFF, d1 
00001224  6700 0038                286      beq     returnDrawObject
00001228                           287      
00001228  223C 00FFFFFF            288      move.l  #WHITE, d1 
0000122E  103C 0050                289      move.b  #PEN_COLOR_TRAP_CODE,d0
00001232  4E4F                     290      trap    #15 
00001234  103C 0051                291      move.b  #FILL_COLOR_TRAP__CODE, d0 
00001238  4E4F                     292      trap    #15 
0000123A                           293      
0000123A  103C 0057                294      move.b  #DRAW_RECTANGLE_COMMAND , d0
0000123E  2A2F 0048                295      move.l  OBJECT_3_POSITION(sp), d5
00001242  2605                     296      move.l  d5, d3  
00001244  E085                     297      asr.l   #8, d5
00001246  9685                     298      sub.l   d5, d3 
00001248  2203                     299      move.l  d3, d1 
0000124A  92AF 0040                300      sub.l   OBJECT_3_WIDTH(sp), d1 
0000124E                           301      ;move.l  OBJECT_3_POSITION(sp), d5 
0000124E                           302      ;asr.l   #8, d5
0000124E                           303      ;move.l  d5, d3 
0000124E                           304      ;sub.l   OBJECT_3_WIDTH(sp), d5 
0000124E                           305      ;move.l  d5, d1 
0000124E                           306      
0000124E  2A3C 000001E0            307      move.l  #DISPLAY_WINDOW_HEIGHT, d5 
00001254  2805                     308      move.l  d5, d4 
00001256  9AAF 0044                309      sub.l   OBJECT_3_HEIGHT(sp), d5 
0000125A  2405                     310      move.l  d5,d2 
0000125C  4E4F                     311      trap    #15 
0000125E                           312  returnDrawObject:
0000125E  4CDF 7FFF                313      movem.l (sp)+, ALL_REG
00001262  4E75                     314      rts                                        ** return, and reset the stack 
00001264                           315  
00001264                           316   
00001264                           317  
00001264  FFFF FFFF                318      SIMHALT             ; halt simulator
00001268                           319  
00001268                           320  * Put variables and constants here
00001268                           321  
00001268                           322      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A0_OFFSET           20
A1_OFFSET           24
A2_OFFSET           28
A3_OFFSET           2C
A4_OFFSET           30
A5_OFFSET           34
A6_OFFSET           38
ALL_REG             7FFF
BIT_DEPTH           20
BMP_FILE_TYPE       424D
CLEARSCREEN         1068
CLEAR_SCREEN_COMMAND  B
CLEAR_SCREEN_MAGIC_VAL  FF00
CR                  D
CREATENEWOBJECT     1094
CUR_DISPLAY_X       4
CUR_DISPLAY_Y       8
D0_OFFSET           0
D1_OFFSET           4
D2_OFFSET           8
D3_OFFSET           C
D4_OFFSET           10
D5_OFFSET           14
D6_OFFSET           18
D7_OFFSET           1C
DELAYFRAME          1048
DELAY_FRAME         17
DISPLAY_WINDOW_HEIGHT  1E0
DISPLAY_WINDOW_WIDTH  280
DOUBLE_BUFFERED_MODE  11
DRAWING_MODE_TRAP_CODE  5C
DRAWOBJECT          118E
DRAW_PIXEL_TRAP_CODE  52
DRAW_RECTANGLE_COMMAND  57
ERROR_COUNTER_OFFSET  4
FILL_COLOR_TRAP__CODE  51
FRAMES_SKIP_TO_DRAW  28
FRAME_DELAY_TIME    1
GAMELOOP            1026
LF                  A
LOOP_COUNTER        C
OBJECT1             1192
OBJECT2             11D6
OBJECT3             121A
OBJECT_1_HEIGHT     5C
OBJECT_1_POSITION   60
OBJECT_1_WIDTH      58
OBJECT_2_HEIGHT     50
OBJECT_2_POSITION   54
OBJECT_2_WIDTH      4C
OBJECT_3_HEIGHT     44
OBJECT_3_POSITION   48
OBJECT_3_WIDTH      40
OBJECT_VELOCITY     A
OFFSET_TO_FILE_SIZE  2
OFFSET_TO_IMAGE_BIT_DEPTH  1C
OFFSET_TO_IMAGE_HEIGHT  16
OFFSET_TO_IMAGE_OFFSET  A
OFFSET_TO_IMAGE_WIDTH  12
PEN_COLOR_TRAP_CODE  50
PUTINOBJECT1        10FC
PUTINOBJECT2        1110
PUTINOBJECT3        1124
REPAINT_SCREEN_TRAP_CODE  5E
RETURNDRAWOBJECT    125E
RETURNUPDATEOBJECT  1188
RUNNING_SPRITE_COUNT  6
SET_OUTPUT_RESOLUTION_TRAP_CODE  21
SPRITEBACKGROUNDCOLOR  808000
START               1000
SWAPBUFFERS         1058
UPDATEOBJECT        107E
UPDATEOBJECT1       1134
UPDATEOBJECT2       1150
UPDATEOBJECT3       116C
WHITE               FFFFFF
