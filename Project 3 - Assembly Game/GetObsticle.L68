00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/7/2021 12:06:13 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  ALL_REG         REG     D0-D7/A0-A6
00000000  =00000000                  8  D0_OFFSET       EQU     0
00000000  =00000004                  9  D1_OFFSET       EQU     4
00000000  =00000008                 10  D2_OFFSET       EQU     8
00000000  =0000000C                 11  D3_OFFSET       EQU     12
00000000  =00000010                 12  D4_OFFSET       EQU     16
00000000  =00000014                 13  D5_OFFSET       EQU     20
00000000  =00000018                 14  D6_OFFSET       EQU     24
00000000  =0000001C                 15  D7_OFFSET       EQU     28
00000000  =00000020                 16  A0_OFFSET       EQU     32
00000000  =00000024                 17  A1_OFFSET       EQU     36
00000000  =00000028                 18  A2_OFFSET       EQU     40
00000000  =0000002C                 19  A3_OFFSET       EQU     44
00000000  =00000030                 20  A4_OFFSET       EQU     48  
00000000  =00000034                 21  A5_OFFSET       EQU     52
00000000  =00000038                 22  A6_OFFSET       EQU     56
00000000                            23  
00000000                            24  ** used in the draw bitmap function for local variables 
00000000  =00000004                 25  CUR_DISPLAY_X      EQU     4
00000000  =00000008                 26  CUR_DISPLAY_Y      EQU     8
00000000  =0000000C                 27  LOOP_COUNTER       EQU     12
00000000  =00000004                 28  ERROR_COUNTER_OFFSET      EQU     4
00000000                            29  
00000000                            30  ** used as constants to offsets from the start of the .bmp header file to important info 
00000000  =00000002                 31  OFFSET_TO_FILE_SIZE     EQU     2
00000000  =00000012                 32  OFFSET_TO_IMAGE_WIDTH   EQU     18
00000000  =00000016                 33  OFFSET_TO_IMAGE_HEIGHT  EQU     22 
00000000  =0000000A                 34  OFFSET_TO_IMAGE_OFFSET  EQU     10
00000000  =0000001C                 35  OFFSET_TO_IMAGE_BIT_DEPTH   EQU     28
00000000                            36  
00000000                            37  ** used for checks that it is the right type of file 
00000000  =00000020                 38  BIT_DEPTH                EQU     $20 
00000000  =0000424D                 39  BMP_FILE_TYPE            EQU     $424D
00000000                            40  
00000000                            41  ** trap code commands for drawing on the screen  
00000000  =00000051                 42  FILL_COLOR_TRAP__CODE   EQU     81
00000000  =00000050                 43  PEN_COLOR_TRAP_CODE     EQU     80
00000000  =00000052                 44  DRAW_PIXEL_TRAP_CODE    EQU     82
00000000  =00000021                 45  SET_OUTPUT_RESOLUTION_TRAP_CODE EQU     33 
00000000  =0000005E                 46  REPAINT_SCREEN_TRAP_CODE    EQU     94
00000000  =0000000B                 47  CLEAR_SCREEN_COMMAND    EQU     11
00000000  =0000005C                 48  DRAWING_MODE_TRAP_CODE  EQU 92
00000000  =00000011                 49  DOUBLE_BUFFERED_MODE    EQU 17
00000000  =00000057                 50  DRAW_RECTANGLE_COMMAND      EQU     87 
00000000                            51  
00000000                            52  ** keyboard values and trap code 
00000000  =00000013                 53  USER_INPUT_TRAP_CODE    EQU     19
00000000  =00000020                 54  KEY_SPACE_INPUT         EQU     $20
00000000                            55  
00000000                            56  
00000000  =0000FF00                 57  CLEAR_SCREEN_MAGIC_VAL  EQU     $FF00
00000000                            58  
00000000                            59  ** new line and reset position values 
00000000  =0000000D                 60  CR      EQU     $0D
00000000  =0000000A                 61  LF      EQU     $0A
00000000                            62  
00000000                            63  ** display window info 
00000000  =00000280                 64  DISPLAY_WINDOW_WIDTH    EQU     640   
00000000  =000001E0                 65  DISPLAY_WINDOW_HEIGHT   EQU     480
00000000                            66  
00000000                            67  ** player variables 
00000000  =00808000                 68  SPRITE_BACKGROUND_COLOR     EQU     $808000
00000000  =00000006                 69  RUNNING_SPRITE_COUNT        EQU     $6
00000000  =0000001E                 70  JUMP_VELOCITY       EQU     30
00000000  =FFFFFF52                 71  GRAVITY             EQU     -174
00000000  =0000002D                 72  MAX_HEIGHT          EQU     45          ; changes based on the players velocity and gravity of the world 
00000000                            73  ** solving for height: y = v^2/ 2g = 30^2/ 2 * 10  =  45
00000000                            74  ** time to reach that height: t = v/g = 3 
00000000                            75  ** velocity at t = 1 -> v(1) = -10 * 1 + 30 = 20 
00000000                            76  ** velocity at t = 2 -> v(2) = -10 * 2 + 30 = 10 
00000000                            77  ** velocity at t = 3 -> v(3) = -10 * 3 + 30 = 0 
00000000                            78  ** etc..
00000000                            79  ** position at t = 1 -> p(t) = p(0) + v(0)t + a*t^2/2  -> p(1) = 0 + 30(1) + -10 * 1/2 = 30 - 5  = 25 
00000000                            80  ** position at t = 2 -> p(2) = 0 + 30(2) - 10*4/2 = 40 
00000000                            81  ** position at t = 3 -> p(3) = 0 + 30(3) - 10 *9/2 = 45
00000000                            82  ** position at t = 4 -> p(4) = 0 + 30(4) - 10 *16/2 = 40 
00000000                            83  ** position at t = 5 -> p(5) = 0 + 30(5) - 10 *25/2 = 25 
00000000                            84  ** position at t = 6 -> p(6) = 0 + 30(6) - 10 *36/2 = 0
00000000                            85  
00000000                            86  
00000000                            87  ** Offset to keycode value 
00000000  =00000040                 88  KEYCODE_VALUE       EQU     64
00000000                            89  
00000000                            90  ** players current position and chunk size to redraw background at 
00000000  =00000044                 91  PLAYER_X_CROP       EQU     68
00000000  =00000048                 92  PLAYER_Y_CROP       EQU     72
00000000  =0000004C                 93  PLAYER_WIDTH        EQU     76
00000000  =00000050                 94  PLAYER_HEIGHT       EQU     80
00000000  =00000054                 95  PLAYER_X_DISPLAY    EQU     84
00000000  =00000058                 96  PLAYER_Y_DISPLAY    EQU     88
00000000                            97  
00000000                            98  *current location to crop at on the player sprite sheet to run through animations. 
00000000  =0000005C                 99  PLAYER_SPRITE_X_CROP   EQU     92
00000000  =00000060                100  PLAYER_SPRITE_Y_CROP   EQU     96
00000000  =00000064                101  PLAYER_SPRITE_WIDTH    EQU     100
00000000  =00000068                102  PLAYER_SPRITE_HEIGHT   EQU     104
00000000  =0000006C                103  PLAYER_SPRITE_X_DISPLAY    EQU     108
00000000  =00000070                104  PLAYER_SPRITE_Y_DISPLAY    EQU     112
00000000                           105  
00000000                           106  
00000000  =00000074                107  PLAYER_SPRITE_SHEET_POINTER    EQU     116
00000000  =00000078                108  BACKGROUND_SPRITE_SHEET_POINTER     EQU     120
00000000                           109  
00000000  =0000007C                110  CUR_PLAYER_VELOCITY     EQU     124
00000000  =00000080                111  CUR_PLAYER_CHANGE_IN_VELOCITY   EQU 128
00000000  =00000084                112  IS_JUMPING      EQU     132
00000000                           113  
00000000  =00000088                114  RANDOM_VALUE    EQU     136
00000000                           115  
00000000                           116  ** Offsets for moving objects
00000000  =0000008C                117  OBJECT_3_X_CROP     EQU     140
00000000  =00000090                118  OBJECT_3_Y_CROP     EQU     144
00000000  =00000094                119  OBJECT_3_WIDTH    EQU     148   
00000000  =00000098                120  OBJECT_3_HEIGHT   EQU     152
00000000  =0000009C                121  OBJECT_3_X_DISPLAY     EQU     156
00000000  =000000A0                122  OBJECT_3_Y_DISPLAY     EQU     160
00000000                           123  
00000000  =000000A4                124  OBJECT_2_X_CROP     EQU     164
00000000  =000000A8                125  OBJECT_2_Y_CROP     EQU     168
00000000  =000000AC                126  OBJECT_2_WIDTH    EQU     172 
00000000  =000000B0                127  OBJECT_2_HEIGHT   EQU     176
00000000  =000000B4                128  OBJECT_2_X_DISPLAY     EQU     180
00000000  =000000B8                129  OBJECT_2_Y_DISPLAY     EQU     184
00000000                           130      
00000000  =000000BC                131  OBJECT_1_X_CROP     EQU     188
00000000  =000000C0                132  OBJECT_1_Y_CROP     EQU     192
00000000  =000000C4                133  OBJECT_1_WIDTH    EQU     196 
00000000  =000000C8                134  OBJECT_1_HEIGHT   EQU     200
00000000  =000000CC                135  OBJECT_1_X_DISPLAY     EQU     204
00000000  =000000D0                136  OBJECT_1_Y_DISPLAY     EQU     208
00000000                           137  
00000000  =00000094                138  STACK_POINTER_OFFSET    EQU     148      ** how much offset to add to the stack pointer for passing in paramaters onto the stack
00000000  =00000040                139  REGISTERS_OFFSET        EQU     64 
00000000                           140  ** moving object variables 
00000000  =0000000A                141  OBJECT_VELOCITY     EQU     10
00000000  =00000028                142  FRAMES_SKIP_TO_DRAW     EQU     40
00000000                           143  
00000000  =00000000                144  OBSTICLE_BACKGROUND_COLOR   EQU     $00000000
00000000                           145  
00000000                           146  
00000000                           147  ** moving objects color 
00000000  =00FFFFFF                148  WHITE           equ $00FFFFFF
00000000                           149  
00000000  =00000006                150  DRAW_PARAMETERS     EQU     6
00001000                           151  START     ORG    $1000
00001000  49F9 000010BC            152      lea     objectLocation, a4
00001006  4DF9 00001104            153      lea     obsticleSprites, a6
0000100C                           154      
0000100C  2C3C 00000094            155      move.l  #STACK_POINTER_OFFSET, d6         ; make room for the objects position on the stack 
00001012  9FC6                     156      sub.l   d6, sp
00001014                           157      
00001014  7E28                     158      move.l  #FRAMES_SKIP_TO_DRAW, d7
00001016  4EB9 0000101C            159      jsr     getObsticleSprite
0000101C                           160      
0000101C                           161      
0000101C                           162  getObsticleSprite:
0000101C  48E7 FFFE                163      movem.l ALL_REG, -(sp)                      ** load the paramaters onto the stack 
00001020                           164      
00001020  202F 001C                165      move.l  D7_OFFSET(sp),d0                    ** checks to see if its been the appropriate amount of frames since last object spawned 
00001024  0C80 00000028            166      cmpi.l  #FRAMES_SKIP_TO_DRAW,d0
0000102A  6600 0082                167      bne     returnGetObsticleSprite
0000102E                           168                            
0000102E  226F 0030                169      move.l  A4_OFFSET(sp),a1 
00001032                           170      
00001032  206F 0038                171      move.l  A6_OFFSET(sp),a0 
00001036  7006                     172      move.l  #DRAW_PARAMETERS, d0                ** move how many paramaters we have to pass into the draw function
00001038  E588                     173      lsl.l   #2, d0                              ** multiply by 4 becasue we are using longs 
0000103A                           174      
0000103A  7201                     175      move.l  #1, d1 
0000103C                           176      ;move.l  #RANDOM_VALUE,d0                   ** multiply it by the random number (gets a random object) 
0000103C  C2C0                     177      mulu    d0, d1
0000103E  2608                     178      move.l  a0, d3 
00001040  D681                     179      add.l   d1, d3                              ** add it to the pointer to obsticleSprites 
00001042  2043                     180      move.l  d3, a0    
00001044                           181      
00001044                           182  checkWhereToPutObject 
00001044  282F 00BC                183      move.l  OBJECT_1_X_CROP(sp), d4 
00001048  0C84 FFFFFFFF            184      cmpi.l  #$FFFFFFFF, d4 
0000104E  6700 0014                185      beq     putInObject1
00001052  282F 00A4                186      move.l  OBJECT_2_X_CROP(sp), d4 
00001056  0C84 FFFFFFFF            187      cmpi.l  #$FFFFFFFF, d4
0000105C  6700 0026                188      beq     putInObject2
00001060  6600 004C                189      bne     returnGetObsticleSprite
00001064                           190      
00001064                           191      
00001064                           192  putInObject1:    
00001064  2F7C 00000000 001C       193      move.l  #0, D7_OFFSET(sp)
0000106C  7006                     194      move.l  #DRAW_PARAMETERS, d0
0000106E                           195  object1Loop:
0000106E  2A19                     196      move.l  (a1)+, d5
00001070  2818                     197      move.l  (a0)+, d4 
00001072  2F84 5000                198      move.l  d4,(sp,d5)
00001076  5380                     199      subi.l  #1, d0 
00001078  0C80 00000000            200      cmpi.l  #0, d0
0000107E  66EE                     201      bne     object1Loop
00001080  6700 002C                202      beq     returnGetObsticleSprite
00001084                           203      
00001084                           204  putInObject2:
00001084  2F7C 00000000 001C       205      move.l  #0, D7_OFFSET(sp)
0000108C  7006                     206      move.l  #DRAW_PARAMETERS, d0
0000108E  2400                     207      move.l  d0, d2 
00001090  E58A                     208      lsl.l   #2,d2
00001092  2209                     209      move.l  a1, d1
00001094  D282                     210      add.l   d2, d1 
00001096  2241                     211      move.l  d1, a1
00001098                           212  object2Loop:
00001098  2A19                     213      move.l  (a1)+, d5
0000109A  2818                     214      move.l  (a0)+, d4 
0000109C  2F84 5000                215      move.l  d4,(sp,d5)
000010A0  5380                     216      subi.l  #1, d0 
000010A2  0C80 00000000            217      cmpi.l  #0, d0
000010A8  66EE                     218      bne     object2Loop
000010AA  6700 0002                219      beq     returnGetObsticleSprite
000010AE                           220  
000010AE                           221  returnGetObsticleSprite
000010AE  1038 0009                222      move.b  $9,d0            *halts similation
000010B2  4E4F                     223      trap #15
000010B4                           224          
000010B4  4E72 2000                225      STOP #$2000
000010B8                           226             
000010B8                           227  
000010B8  FFFF FFFF                228      SIMHALT   
000010BC                           229  
000010BC= 000000BC 000000C0 ...    230  objectLocation      dc.l    OBJECT_1_X_CROP, OBJECT_1_Y_CROP, OBJECT_1_WIDTH, OBJECT_1_HEIGHT, OBJECT_1_X_DISPLAY, OBJECT_1_Y_DISPLAY
000010D4= 000000A4 000000A8 ...    231                      dc.l    OBJECT_2_X_CROP, OBJECT_2_Y_CROP, OBJECT_2_WIDTH, OBJECT_2_HEIGHT, OBJECT_2_X_DISPLAY, OBJECT_2_Y_DISPLAY
000010EC= 0000008C 00000090 ...    232                      dc.l    OBJECT_3_X_CROP, OBJECT_3_Y_CROP, OBJECT_3_WIDTH, OBJECT_3_HEIGHT, OBJECT_3_X_DISPLAY, OBJECT_3_Y_DISPLAY
00001104                           233  
00001104= 00000000 00000000 ...    234  obsticleSprites     dc.l    0, 0, 83, 89, 557, 391
0000111C= 00000054 00000000 ...    235                      dc.l    84, 0, 81, 123, 559, 357
00001134= 000000A6 00000000 ...    236                      dc.l    166, 0, 158, 158, 482, 322
0000114C= 00000000 0000009F ...    237                      dc.l    0, 159, 105, 149, 535, 331
00001164                           238                      
00001164                           239      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A0_OFFSET           20
A1_OFFSET           24
A2_OFFSET           28
A3_OFFSET           2C
A4_OFFSET           30
A5_OFFSET           34
A6_OFFSET           38
ALL_REG             7FFF
BACKGROUND_SPRITE_SHEET_POINTER  78
BIT_DEPTH           20
BMP_FILE_TYPE       424D
CHECKWHERETOPUTOBJECT  1044
CLEAR_SCREEN_COMMAND  B
CLEAR_SCREEN_MAGIC_VAL  FF00
CR                  D
CUR_DISPLAY_X       4
CUR_DISPLAY_Y       8
CUR_PLAYER_CHANGE_IN_VELOCITY  80
CUR_PLAYER_VELOCITY  7C
D0_OFFSET           0
D1_OFFSET           4
D2_OFFSET           8
D3_OFFSET           C
D4_OFFSET           10
D5_OFFSET           14
D6_OFFSET           18
D7_OFFSET           1C
DISPLAY_WINDOW_HEIGHT  1E0
DISPLAY_WINDOW_WIDTH  280
DOUBLE_BUFFERED_MODE  11
DRAWING_MODE_TRAP_CODE  5C
DRAW_PARAMETERS     6
DRAW_PIXEL_TRAP_CODE  52
DRAW_RECTANGLE_COMMAND  57
ERROR_COUNTER_OFFSET  4
FILL_COLOR_TRAP__CODE  51
FRAMES_SKIP_TO_DRAW  28
GETOBSTICLESPRITE   101C
GRAVITY             FFFFFF52
IS_JUMPING          84
JUMP_VELOCITY       1E
KEYCODE_VALUE       40
KEY_SPACE_INPUT     20
LF                  A
LOOP_COUNTER        C
MAX_HEIGHT          2D
OBJECT1LOOP         106E
OBJECT2LOOP         1098
OBJECTLOCATION      10BC
OBJECT_1_HEIGHT     C8
OBJECT_1_WIDTH      C4
OBJECT_1_X_CROP     BC
OBJECT_1_X_DISPLAY  CC
OBJECT_1_Y_CROP     C0
OBJECT_1_Y_DISPLAY  D0
OBJECT_2_HEIGHT     B0
OBJECT_2_WIDTH      AC
OBJECT_2_X_CROP     A4
OBJECT_2_X_DISPLAY  B4
OBJECT_2_Y_CROP     A8
OBJECT_2_Y_DISPLAY  B8
OBJECT_3_HEIGHT     98
OBJECT_3_WIDTH      94
OBJECT_3_X_CROP     8C
OBJECT_3_X_DISPLAY  9C
OBJECT_3_Y_CROP     90
OBJECT_3_Y_DISPLAY  A0
OBJECT_VELOCITY     A
OBSTICLESPRITES     1104
OBSTICLE_BACKGROUND_COLOR  0
OFFSET_TO_FILE_SIZE  2
OFFSET_TO_IMAGE_BIT_DEPTH  1C
OFFSET_TO_IMAGE_HEIGHT  16
OFFSET_TO_IMAGE_OFFSET  A
OFFSET_TO_IMAGE_WIDTH  12
PEN_COLOR_TRAP_CODE  50
PLAYER_HEIGHT       50
PLAYER_SPRITE_HEIGHT  68
PLAYER_SPRITE_SHEET_POINTER  74
PLAYER_SPRITE_WIDTH  64
PLAYER_SPRITE_X_CROP  5C
PLAYER_SPRITE_X_DISPLAY  6C
PLAYER_SPRITE_Y_CROP  60
PLAYER_SPRITE_Y_DISPLAY  70
PLAYER_WIDTH        4C
PLAYER_X_CROP       44
PLAYER_X_DISPLAY    54
PLAYER_Y_CROP       48
PLAYER_Y_DISPLAY    58
PUTINOBJECT1        1064
PUTINOBJECT2        1084
RANDOM_VALUE        88
REGISTERS_OFFSET    40
REPAINT_SCREEN_TRAP_CODE  5E
RETURNGETOBSTICLESPRITE  10AE
RUNNING_SPRITE_COUNT  6
SET_OUTPUT_RESOLUTION_TRAP_CODE  21
SPRITE_BACKGROUND_COLOR  808000
STACK_POINTER_OFFSET  94
START               1000
USER_INPUT_TRAP_CODE  13
WHITE               FFFFFF
